
import pandas as pd
from pybit.unified_trading import HTTP
import BirzaAPI


class BybitAPI(BirzaAPI):
    def __init__(self, api_key: str, api_secret: str, testnet: bool = True):
        self.session = HTTP(
            testnet=testnet,
            api_key=api_key,
            api_secret=api_secret,
        )
        self.logger = local_logging("[OLD] BirzaAPI")
    def check_connection(self):
        logger = self.logger    
        try:
            logger.info("üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Bybit API...")
            
            # –¢–µ—Å—Ç –±–∞–ª–∞–Ω—Å–∞
            balance = self.session.get_wallet_balance(accountType="UNIFIED")
            usdt = balance["result"]["list"][0]["coin"][0]
            logger.info(f"üí∞ –ë–∞–ª–∞–Ω—Å USDT: {usdt['availableToWithdraw']}")

            # –¢–µ—Å—Ç —Å–≤–µ—á–µ–π
            candles = self.session.get_kline(
                category="linear",
                symbol="BTCUSDT",
                interval="1m",
                limit=3
            )
            if not candles.get("result") or not candles["result"]["list"]:
                raise RuntimeError("–°–≤–µ—á–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

            logger.info(f"üìà –ü–æ–ª—É—á–µ–Ω—ã {len(candles['result']['list'])} —Å–≤–µ—á–∏ –ø–æ BTCUSDT.")
            logger.info("‚úÖ Bybit API —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")

        except Exception as e:
            logger.exception(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BybitAPI: {e}")
            raise

    # –ü—Ä–∏–º–µ—Ä –º–µ—Ç–æ–¥–∞ —Å –ª–æ–≥–∞–º–∏
    def get_ohlcv(self, symbol, timeframe="1m", limit=200):
        logger = self.logger
        try:
            logger.info(f"üìä –ó–∞–≥—Ä—É–∑–∫–∞ {limit} —Å–≤–µ—á–µ–π {symbol} —Å —Ç–∞–π–º—Ñ—Ä–µ–π–º–æ–º {timeframe}")
            res = self.session.get_kline(
                category="linear",
                symbol=symbol.replace("/", ""),
                interval=timeframe,
                limit=limit
            )
            df = pd.DataFrame(res["result"]["list"], columns=[
                "timestamp", "open", "high", "low", "close", "volume", "turnover"
            ])
            df = df.astype(float)
            df["timestamp"] = pd.to_datetime(df["timestamp"], unit="ms")
            df.rename(columns={"timestamp": "time"}, inplace=True)
            return df[["time", "open", "high", "low", "close", "volume"]]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ OHLCV: {e}")
            return pd.DataFrame()


def local_logging(logname):
    import logging

    logger = logging.getLogger(logname)
    logger.setLevel(logging.INFO)
    handler = logging.StreamHandler()
    formatter = logging.Formatter("%(asctime)s [%(levelname)s] %(message)s")
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    return logger

if "__name__" ==  __main__:
    import os
    from dotenv import load_dotenv

    load_dotenv()

    api_key = os.getenv("BYBIT_API_KEY")
    api_secret = os.getenv("BYBIT_API_SECRET")

    check_bot = BybitAPI(api_key=api_key, api_secret=api_secret, testnet=True)
    check_bot.check_connection()